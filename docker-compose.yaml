# For observability (distributed tracing + logs), use:
#   ./scripts/observability.sh up -d
# Or:
#   docker compose --profile observability up -d
#
# See observability/README.md for details.

services:
  # PostgreSQL database for persistent state
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis for ephemeral state and caching
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Control-plane migrations (runs once before services start)
  control-plane-migrations:
    build:
      context: .
      dockerfile: docker/Dockerfile.control-plane
    command: ["uv", "run", "prisma", "migrate", "deploy", "--schema", "prisma/control_plane/schema.prisma"]
    environment:
      - DATABASE_URL=${DATABASE_URL}
    volumes:
      - ./src:/app/src:ro
      - ./config:/app/config:ro
      - ./prisma:/app/prisma:ro
    depends_on:
      db:
        condition: service_healthy
    restart: "no"

  # Single-container local LLM gateway (Ollama + LiteLLM)
  local-llm:
    build:
      context: .
      dockerfile: docker/Dockerfile.local-llm
    environment:
      - LITELLM_MASTER_KEY=${LITELLM_MASTER_KEY}
      - MODEL_NAME=${LOCAL_LLM_MODEL_NAME:-gemma2:2b}
    volumes:
      - local_llm_models:/root/.ollama
    ports:
      - "4010:4000"   # OpenAI-compatible API (LiteLLM)
      - "11434:11434" # Ollama API with native OpenAI compatibility
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/test"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Dummy provider for demo (deterministic tool call responses)
  dummy-provider:
    build:
      context: .
      dockerfile: docker/Dockerfile.control-plane
    command: ["uv", "run", "python", "scripts/run_dummy_provider.py", "--port", "8080"]
    environment:
      - UV_CACHE_DIR=/tmp/uv-cache
    ports:
      - "4015:8080"
    volumes:
      - ./scripts:/app/scripts:ro
      - ./src:/app/src:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 5s
      timeout: 3s
      retries: 5

  # V2 Gateway (integrated FastAPI + LiteLLM architecture)
  v2-gateway:
    build:
      context: .
      dockerfile: docker/Dockerfile.v2-gateway
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - PROXY_API_KEY=${PROXY_API_KEY}
      - V2_GATEWAY_PORT=${V2_GATEWAY_PORT:-8000}
      - V2_POLICY_CONFIG=${V2_POLICY_CONFIG:-/app/config/v2_config.yaml}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT:-}
      - OTEL_SERVICE_NAME=luthien-v2-gateway
    ports:
      - "${V2_GATEWAY_PORT:-8000}:8000"
    volumes:
      - ./src:/app/src:ro
      - ./config:/app/config:ro
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    stop_grace_period: 2s

  # === OBSERVABILITY STACK ===
  # Services: Tempo (traces), Loki (logs), Grafana (visualization)
  # See: observability/README.md

  tempo:
    image: grafana/tempo:latest
    profiles: ["observability"]
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
      - ./observability/tempo/tempo.yaml:/etc/tempo.yaml:ro
      - ./observability/data/tempo:/var/tempo
    ports:
      - "4317:4317"  # OTLP gRPC (application sends traces here)
      - "3200:3200"  # Tempo HTTP API
    networks:
      - default

  loki:
    image: grafana/loki:latest
    profiles: ["observability"]
    command: ["-config.file=/etc/loki/local-config.yaml"]
    volumes:
      - ./observability/loki/loki.yaml:/etc/loki/local-config.yaml:ro
      - ./observability/data/loki:/loki
    ports:
      - "3100:3100"  # Loki HTTP API
    networks:
      - default

  promtail:
    image: grafana/promtail:latest
    profiles: ["observability"]
    command: ["-config.file=/etc/promtail/promtail.yaml"]
    volumes:
      - ./observability/promtail/promtail.yaml:/etc/promtail/promtail.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - default
    depends_on:
      - loki

  grafana:
    image: grafana/grafana:latest
    profiles: ["observability"]
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./observability/grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml:ro
      - ./observability/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./observability/data/grafana:/var/lib/grafana
    ports:
      - "3000:3000"  # Grafana UI
    networks:
      - default
    depends_on:
      - tempo
      - loki

volumes:
  postgres_data:
  local_llm_models:

networks:
  default:
    driver: bridge
