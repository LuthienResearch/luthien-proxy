datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-py"
}

model DebugLog {
  id                  String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  timeCreated         DateTime @default(now()) @map("time_created")
  debugTypeIdentifier String   @map("debug_type_identifier")
  jsonblob            Json

  @@map("debug_logs")
  @@index([timeCreated], name: "idx_debug_logs_created_at")
  @@index([debugTypeIdentifier], name: "idx_debug_logs_type")
}

model ConversationCall {
  callId      String    @id @map("call_id")
  modelName   String?   @map("model_name")
  provider    String?
  status      String?
  createdAt   DateTime  @default(now()) @map("created_at")
  completedAt DateTime? @map("completed_at")

  events       ConversationEvent[]
  policyEvents PolicyEvent[]

  @@map("conversation_calls")
  @@index([createdAt], name: "idx_conversation_calls_created")
}

model ConversationEvent {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  callId    String   @map("call_id")
  eventType String   @map("event_type")
  sequence  BigInt
  payload   Json
  createdAt DateTime @default(now()) @map("created_at")

  call                    ConversationCall @relation(fields: [callId], references: [callId], onDelete: Cascade)
  originalPolicyEvents    PolicyEvent[]    @relation("OriginalEvent")
  modifiedPolicyEvents    PolicyEvent[]    @relation("ModifiedEvent")

  @@map("conversation_events")
  @@index([callId, sequence], name: "idx_conversation_events_call_sequence")
  @@index([eventType], name: "idx_conversation_events_type")
  @@index([createdAt], name: "idx_conversation_events_created")
}

model PolicyEvent {
  id                String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  callId            String   @map("call_id")
  policyClass       String   @map("policy_class")
  policyConfig      Json?    @map("policy_config")
  eventType         String   @map("event_type")
  originalEventId   String?  @map("original_event_id") @db.Uuid
  modifiedEventId   String?  @map("modified_event_id") @db.Uuid
  metadata          Json?
  createdAt         DateTime @default(now()) @map("created_at")

  call            ConversationCall   @relation(fields: [callId], references: [callId], onDelete: Cascade)
  originalEvent   ConversationEvent? @relation("OriginalEvent", fields: [originalEventId], references: [id], onDelete: SetNull)
  modifiedEvent   ConversationEvent? @relation("ModifiedEvent", fields: [modifiedEventId], references: [id], onDelete: SetNull)

  @@map("policy_events")
  @@index([callId, createdAt], name: "idx_policy_events_call_created")
  @@index([eventType], name: "idx_policy_events_type")
  @@index([createdAt], name: "idx_policy_events_created")
}
